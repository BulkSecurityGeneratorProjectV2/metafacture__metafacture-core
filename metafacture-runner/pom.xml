<?xml version="1.0" encoding="UTF-8"?>
<project xmlns="http://maven.apache.org/POM/4.0.0" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd">
	<modelVersion>4.0.0</modelVersion>

	<parent>
		<groupId>org.metafacture</groupId>
		<artifactId>metafacture-core</artifactId>
		<version>5.0.0-SNAPSHOT</version>
	</parent>

	<artifactId>metafacture-runner</artifactId>

	<name>Metafacture Runner</name>
	<description>Standalone application for working with Flux and Metamorph scripts</description>

	<scm>
		<connection>${project.parent.scm.connection}</connection>
		<developerConnection>${project.parent.scm.developerConnection}</developerConnection>
		<tag>${project.parent.scm.tag}</tag>
		<url>${project.parent.scm.url}</url>
	</scm>

	<dependencies>
		<dependency>
			<groupId>org.metafacture</groupId>
			<artifactId>metafacture-framework</artifactId>
			<version>${project.version}</version>
		</dependency>

		<dependency>
			<groupId>org.metafacture</groupId>
			<artifactId>metafacture-commons</artifactId>
			<version>${project.version}</version>
		</dependency>

		<dependency>
			<groupId>org.metafacture</groupId>
			<artifactId>metafacture-flux</artifactId>
			<version>${project.version}</version>
		</dependency>

		<!-- Metafacture module packages -->

		<dependency>
			<groupId>org.metafacture</groupId>
			<artifactId>metafacture-biblio</artifactId>
			<version>${project.version}</version>
		</dependency>

		<dependency>
			<groupId>org.metafacture</groupId>
			<artifactId>metafacture-csv</artifactId>
			<version>${project.version}</version>
		</dependency>

		<dependency>
			<groupId>org.metafacture</groupId>
			<artifactId>metafacture-elasticsearch</artifactId>
			<version>${project.version}</version>
		</dependency>

		<dependency>
			<groupId>org.metafacture</groupId>
			<artifactId>metafacture-files</artifactId>
			<version>${project.version}</version>
		</dependency>

		<dependency>
			<groupId>org.metafacture</groupId>
			<artifactId>metafacture-flowcontrol</artifactId>
			<version>${project.version}</version>
		</dependency>

		<dependency>
			<groupId>org.metafacture</groupId>
			<artifactId>metafacture-formatting</artifactId>
			<version>${project.version}</version>
		</dependency>

		<dependency>
			<groupId>org.metafacture</groupId>
			<artifactId>metafacture-formeta</artifactId>
			<version>${project.version}</version>
		</dependency>

		<dependency>
			<groupId>org.metafacture</groupId>
			<artifactId>metafacture-io</artifactId>
			<version>${project.version}</version>
		</dependency>

		<dependency>
			<groupId>org.metafacture</groupId>
			<artifactId>metafacture-javaintegration</artifactId>
			<version>${project.version}</version>
		</dependency>

		<dependency>
			<groupId>org.metafacture</groupId>
			<artifactId>metafacture-jdom</artifactId>
			<version>${project.version}</version>
		</dependency>

		<dependency>
			<groupId>org.metafacture</groupId>
			<artifactId>metafacture-json</artifactId>
			<version>${project.version}</version>
		</dependency>

		<dependency>
			<groupId>org.metafacture</groupId>
			<artifactId>metafacture-linkeddata</artifactId>
			<version>${project.version}</version>
		</dependency>

		<dependency>
			<groupId>org.metafacture</groupId>
			<artifactId>metafacture-mangling</artifactId>
			<version>${project.version}</version>
		</dependency>

		<dependency>
			<groupId>org.metafacture</groupId>
			<artifactId>metafacture-monitoring</artifactId>
			<version>${project.version}</version>
		</dependency>

		<dependency>
			<groupId>org.metafacture</groupId>
			<artifactId>metafacture-plumbing</artifactId>
			<version>${project.version}</version>
		</dependency>

		<dependency>
			<groupId>org.metafacture</groupId>
			<artifactId>metafacture-scripting</artifactId>
			<version>${project.version}</version>
		</dependency>

		<dependency>
			<groupId>org.metafacture</groupId>
			<artifactId>metafacture-statistics</artifactId>
			<version>${project.version}</version>
		</dependency>

		<dependency>
			<groupId>org.metafacture</groupId>
			<artifactId>metafacture-strings</artifactId>
			<version>${project.version}</version>
		</dependency>

		<dependency>
			<groupId>org.metafacture</groupId>
			<artifactId>metafacture-triples</artifactId>
			<version>${project.version}</version>
		</dependency>

		<dependency>
			<groupId>org.metafacture</groupId>
			<artifactId>metafacture-xml</artifactId>
			<version>${project.version}</version>
		</dependency>

		<dependency>
			<groupId>org.metafacture</groupId>
			<artifactId>metamorph</artifactId>
			<version>${project.version}</version>
		</dependency>

		<!-- In a perfect world the slf4j binding would be a
		     provided dependency so that the user can replace
		     it easily with a different binding. However, slf4j
		     does not use the context class loader for loading
		     its binding but the same class loader which was
		     used to load the classes of the slf4j-api. Until
		     a solution is found for this problem, the binding
		     need to be placed on the class path. -->
		<dependency>
			<groupId>org.slf4j</groupId>
			<artifactId>slf4j-log4j12</artifactId>
			<version>1.7.21</version>
		</dependency>

		<!-- The following dependencies are placed in the "provided"
		     scope to prevent them from being included in the class
		     path but still have them available for building the
		     distribution assembly.
		     The reason for this is that an appropriate implementation
		     for jndi depends on the runtime environment and
		     should be chosen by the user of the package and not the
		     package implementer. However, we also attempt to build
		     a distribution package which should include everything
		     that is required for metafacture-runner/Flux to work out
		     of the box. By including the dependencies in the assembly
		     without putting them on the class path, the user can
		     replace them easily with other implementations if
		     necessary. -->
		<dependency>
			<groupId>simple-jndi</groupId>
			<artifactId>simple-jndi</artifactId>
			<version>0.11.4.1</version>
			<scope>provided</scope>
		</dependency>

		<dependency>
			<!-- Required for connection pooling with simple-jndi -->
			<groupId>commons-dbcp</groupId>
			<artifactId>commons-dbcp</artifactId>
			<version>1.4</version>
			<scope>provided</scope>
		</dependency>
	</dependencies>

	<build>
		<resources>
			<resource>
				<directory>src/main/resources</directory>
				<filtering>true</filtering>
				<excludes>
					<exclude>assembly-resources/**/*</exclude>
				</excludes>
			</resource>
		</resources>

		<plugins>
			<plugin>
				<groupId>org.apache.maven.plugins</groupId>
				<artifactId>maven-jar-plugin</artifactId>
				<configuration>
					<archive>
						<manifest>
							<addClasspath>true</addClasspath>
							<!-- Configures the classpath prefix. This configuration option is
								used to specify that all needed libraries are found under lib/ directory. -->
							<classpathPrefix>lib/</classpathPrefix>
							<!-- Specifies the main class of the application -->
							<mainClass>org.metafacture.runner.Flux</mainClass>
						</manifest>
						<manifestEntries>
							<git-commit>${buildNumber}</git-commit>
						</manifestEntries>
					</archive>
				</configuration>
			</plugin>

			<plugin>
				<groupId>org.codehaus.mojo</groupId>
				<artifactId>buildnumber-maven-plugin</artifactId>
				<version>1.4</version>
				<executions>
					<execution>
						<phase>validate</phase>
						<goals>
							<goal>create</goal>
						</goals>
					</execution>
				</executions>
			</plugin>

			<plugin>
				<artifactId>maven-dependency-plugin</artifactId>
				<version>2.10</version>
				<executions>
					<execution>
						<id>unpack-schemata</id>
						<phase>generate-resources</phase>
						<goals>
							<goal>unpack</goal>
						</goals>
						<configuration>
							<artifactItems>
								<artifactItem>
									<groupId>org.metafacture</groupId>
									<artifactId>metamorph</artifactId>
								</artifactItem>
							</artifactItems>
							<includes>schemata/**/*</includes>
						</configuration>
					</execution>
				</executions>
			</plugin>

			<plugin>
				<artifactId>maven-assembly-plugin</artifactId>
				<version>3.0.0</version>
				<executions>
					<execution>
						<id>create-distribution-package</id>
						<phase>package</phase>
						<goals>
							<goal>single</goal>
						</goals>
						<configuration>
							<descriptors>
								<descriptor>/src/main/assembly/assembly.xml</descriptor>
							</descriptors>
						</configuration>
					</execution>
				</executions>
			</plugin>
		</plugins>
	</build>
</project>
